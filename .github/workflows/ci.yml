name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Format check
        run: pnpm run format --check

      - name: Type check
        run: pnpm run type-check

      - name: Security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true # Don't fail on low-severity issues

  # Job 2: Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        node-version: [18, 20, 22] # Test multiple Node.js versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Run sensor tests
        run: pnpm run test:sensors

      - name: Run API tests
        run: pnpm run test:api
        continue-on-error: true # API tests may need hardware

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: test-results/
          retention-days: 7

  # Job 3: Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build server
        run: pnpm --filter @ultibiker/server build

      - name: Build web client
        run: pnpm --filter @ultibiker/web build

      - name: Build core library
        run: pnpm --filter @ultibiker/core build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/server/dist/
            packages/web/dist/
            packages/core/dist/
          retention-days: 30

  # Job 4: Integration Tests (Optional, hardware-dependent)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    continue-on-error: true # Don't fail entire pipeline on integration test issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run integration tests
        run: pnpm run test:integration
        timeout-minutes: 10 # Prevent hanging on hardware timeouts

  # Job 5: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 6: Deploy (Production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to production
        id: deploy
        run: |
          echo "üöÄ Deployment would happen here"
          echo "url=https://ultibiker.app" >> $GITHUB_OUTPUT

  # Job 7: Notify
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: echo "‚úÖ Pipeline succeeded - UltiBiker deployed successfully!"

      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: echo "‚ùå Pipeline failed - Check logs for details"